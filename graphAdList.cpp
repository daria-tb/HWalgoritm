#include <iostream>
#include <vector>
using namespace std;
/* Представление неориентированного графа в виде списка смежности:

Ниже представлен неориентированный граф с 3 вершинами. 
Таким образом, будет создан массив list размером 3, где каждый индекс представляет вершину. 
Теперь вершина 0 имеет двух соседей (т. е. 1 и 2). Таким образом, 
вставьте вершины 1 и 2 в индексы 0 массива. Аналогично, 
для вершины 1 она имеет двух соседей (т. е. 2 и 0). Таким образом, вставьте вершины 2 и 0 в индексы 1 массива.
 Аналогично, для вершины 2 вставьте ее соседей в массив list. */
   
// Додаємо ребро між вершинами i та j (для неорієнтованого графа)
void addEdge(vector<vector<int>>& adj, int i, int j) {
    adj[i].push_back(j);  // Додаємо j в список суміжності i
    adj[j].push_back(i);  // Додаємо i в список суміжності j (обернене ребро)
}

// Вивід списку суміжності
void displayAdjList(const vector<vector<int>>& adj) {
    for (int i = 0; i < adj.size(); i++) {
        cout << i << ": ";          // Виводимо вершину
        for (int j : adj[i]) {
            cout << j << " ";       // Виводимо сусідів цієї вершини
        }
        cout << endl;
    }
}

int main() 
{
    int V = 4;                    // Кількість вершин
    vector<vector<int>> adj(V);   // Ініціалізація списку суміжності

    // Додаємо ребра
    addEdge(adj, 0, 1);
    addEdge(adj, 0, 2);
    addEdge(adj, 1, 2);
    addEdge(adj, 2, 3);

    cout << "Adjacency List Representation:" << endl;
    displayAdjList(adj);

    return 0;
}

/* Представление направленного графа в виде списка смежности:

Нижеприведенный ориентированный граф имеет 3 вершины. Таким образом, будет создан массив list размером 3, где каждый индекс представляет вершину. Теперь вершина 0 не имеет соседей. Для вершины 1 у нее есть два соседа (т. е. 0 и 2). Таким образом, вставьте вершины 0 и 2 в индексы 1 массива. Аналогично, для вершины 2 вставьте ее соседей в массив list. */
